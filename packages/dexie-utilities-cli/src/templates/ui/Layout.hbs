import { type ReactNode, type Key, useState, useEffect, useMemo } from "react";
import { Row, Col, Table, Button, Alert } from "antd";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import useEvent from "react-use-event-hook";
import { useNavigate, useLocation } from "react-router-dom";
import { IoSearch } from "react-icons/io5";
import { IoMdAddCircleOutline, IoMdRemoveCircleOutline } from "react-icons/io";
import { TbDatabaseExport, TbDatabaseImport } from "react-icons/tb";
import { useCache } from "@meta-ultra/cache";
import { RouteModal } from '@/components/RouteModal'
import $axios from "@/utils/$axios";
import useTableColumns from "./useTableColumns";
import useQueryForm from "./useQueryForm";

const RouteModalRoutes = [
  /\/(delete|add|import|export)$/,
  /\/[^/]+\/(edit)$/,
] as const;

type Queries = {[name: string]: any, page?: number, pageSize?: number, sorter?: {field: string, order: string}};

export default function Layout({children}: {children: ReactNode}) {
  const location = useLocation();
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const cache = useCache();

  const columns = useTableColumns();
  const [rawQueries, setRawQueries] = useState<Queries>({page: 1, pageSize: 10, ...(cache.get("{{pluralizeKebabCase entityName}}") || {})});
  const queries = useMemo(() => {
    return Object.entries(rawQueries).reduce((queries: any, [key, value]) => {
      if (value !== undefined) {
        queries[key] = value;
      }
      return queries;
    }, {});
  }, [rawQueries]);
  const { isLoading, data: dataSource = {data: [], total: 0} } = useQuery<{data: any[], total: number}>({
    queryKey: ["/api/{{pluralizeKebabCase entityName}}", queries],
    queryFn: ({queryKey}) => $axios.get(queryKey[0] as string, {params: queryKey[1]})
  });
  const onTableChange = useEvent((pagination, filters, sorter, extra) => {
    setRawQueries((rawQueries) => {
      const newRawQueries = {
        ...rawQueries,
        page: pagination.current,
        pageSize: pagination.pageSize,
      };
      if (sorter.order) {
        newRawQueries.sorter = {
          field: sorter.field,
          order: sorter.order,
        };
      }
      else {
        delete newRawQueries.sorter;
      }
      return newRawQueries;
    });
  });

  const [queryForm, queryFormRef] = useQueryForm(queries);
  const onSearch = useEvent(() => {
    setRawQueries((rawQueries) => {
      return {
        ...rawQueries,
        ...queryFormRef.getFieldsValue(),
        page: 1,
      }
    })
  });

  useEffect(() => {
    cache.set("{{pluralizeKebabCase entityName}}", queries);
  }, [queries]);

  useEffect(() => {
    if (!RouteModalRoutes.find((re) => re.test(location.pathname))) {
      queryClient.invalidateQueries({
        queryKey: ["/api/{{pluralizeKebabCase entityName}}"]
      });
    }
  }, [location.pathname, queryClient]);

  const [selectedRowKeys, setSelectedRowKeys] = useState<Key[]>([]);
  const clearSelectedRowKeysAfterDelete = useEvent((ids: any[]) => {
    setSelectedRowKeys((selectedRowKeys) => {
      return selectedRowKeys.filter((key) => !ids.find((id) => id === key))
    })
  });
  const hasSelected = selectedRowKeys.length > 0;
  const rowSelection = {
    preserveSelectedRowKeys: true,
    selectedRowKeys,
    onChange(newSelectedRowKeys: Key[]) {
      setSelectedRowKeys(newSelectedRowKeys);
    }
  };

  return (
    <section className="m-1">
      <section className="rounded mb-2 p-5 shadow-[1px_1px_5px_0px_#cdcdcd]">
        {queryForm}
        <Row justify={"end"} gutter={16}>
          <Col><Button onClick={onSearch} type="primary"><IoSearch size={20} className="inline-block relative -top-[2px] mr-2"/>查 询</Button></Col>
          <Col><Button onClick={() => navigate(`add`)}><IoMdAddCircleOutline size={20} className="inline-block relative -top-[2px] mr-2"/>新 增</Button></Col>
          <Col><Button onClick={() => navigate(`delete`, { state: {ids: selectedRowKeys} })} disabled={!hasSelected} danger><IoMdRemoveCircleOutline size={20} className="inline-block relative -top-[2px] mr-2"/>删 除</Button></Col>
          <Col><Button onClick={() => navigate(`export`)}><TbDatabaseExport size={20} className="inline-block relative -top-[2px] mr-2"/>导 出</Button></Col>
          <Col><Button onClick={() => navigate(`import`)}><TbDatabaseImport size={20} className="inline-block relative -top-[2px] mr-2"/>导 入</Button></Col>
        </Row>
      </section>
      <section className="rounded mt-1 mb-2 p-5 shadow-[1px_1px_5px_0px_#cdcdcd]">
        { 
          hasSelected 
          ? (
            <div className="relative">
              <Alert rootClassName="!mb-1" message={`已选择${selectedRowKeys.length}条记录`} type="info" showIcon />
              <Button rootClassName="!absolute !top-1/2 right-2 transform -translate-y-1/2" type="link" onClick={() => {setSelectedRowKeys([]);}}>取 消</Button>
            </div>
          )
          : null 
        }
        <Table
          rowKey={"id"}
          columns={columns}
          rowSelection={rowSelection}
          scroll=\{{x: 1000, y: 500}}
          loading={isLoading}
          dataSource={dataSource.data}
          pagination=\{{total: dataSource.total || dataSource.data.length}}
          onChange={onTableChange}
        />
      </section>
      <RouteModal routes={RouteModalRoutes} context=\{{clearSelectedRowKeysAfterDelete}}>
        {children}
      </RouteModal>
    </section>
  )
}
