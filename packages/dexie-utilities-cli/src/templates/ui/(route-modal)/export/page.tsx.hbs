import { useEffect, useState } from 'react';
import { useLocation } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import useEvent from 'react-use-event-hook';
import dayjs from "dayjs";
import * as XLSX from "xlsx-js-style";
import { groupBy, debounce, isNil } from 'lodash-es';
import { AiOutlineLoading3Quarters, AiFillCheckCircle, AiFillCloseCircle } from "react-icons/ai";
import { useRouteModalContext } from '@/components/@meta-ultra/antd-plus';
import $axios from '@/utils/$axios';

{{#if (isSelfReference $table)}}
function flatMapSelfReferenceTree(treeNodes: any[], result: any[] = []) {
  for (let i = 0; i < treeNodes.length; ++i) {
    const treeNode = treeNodes[i];
    if (treeNode) {
      result.push(treeNode);
      if (treeNode.{{pluralizeLowerCamelCase tableName}} && treeNode.{{pluralizeLowerCamelCase tableName}}.length) {
        flatMapSelfReferenceTree(treeNode.{{pluralizeLowerCamelCase tableName}}, result);
      }
    }
  }

  return result;
}
{{/if}}

export default function Page() {
  {{#if (isSelfReference $table)}}
  let { isLoading, data } = useQuery<any[]>({
    queryKey: ["/api/{{pluralizeKebabCase tableName}}"],
    queryFn: ({queryKey}) => $axios.get(queryKey[0] as string)
  });
  {{else}}
  const location = useLocation();
  const { isLoading, data: dataSource = {data: [], total: 0} } = useQuery<{data: any[], total: number}>({
    queryKey: ["/api/{{pluralizeKebabCase tableName}}", location.state && location.state.queries],
    queryFn: ({queryKey}) => $axios.get(queryKey[0] as string, {params: queryKey[1]})
  });
  {{/if}}
  
  const context = useRouteModalContext();
  useEffect(() => {
    if (context) {
      context.setModalProps({
        width: 150,  
        footer: null,
        closeIcon: false,
        maskClosable: false,
      });
    }
  }, []);

  const [isExporting, setIsExporting] = useState<Error | boolean>(true);
  // fix: avoid unexpected second invoking by debouncing within a magic period.
  const exportExcel = useEvent(debounce(() => {
    try {
      const rows = [];
      {{#if (isSelfReference $table)}}
      data = flatMapSelfReferenceTree(data || []);
      for (let i = 0; i < data.length; ++i) {
      {{else}}
      for (let i = 0; i < dataSource.data.length; ++i) {
      {{/if}}
        const row: any[] = [];
        {{#if (isSelfReference $table)}}
        const record = data[i];
        {{else}}
        const record = dataSource.data[i];
        {{/if}}
        {{#each $ui}}{{#unless (isNilorEmpty this.title)}}{{#if this.isRef}}
        row.push(record["{{getForeignPropertyName @key}}"] && record["{{getForeignPropertyName @key}}"]["{{getForeignFieldName this.controls.label}}"] || "-");
        {{else}}{{#if (isAvailableExportTableColumnControls this.controls)}}{{#if (isDate this.type)}}
        row.push(record["{{@key}}"] && dayjs(record["{{@key}}"]).isValid() ? dayjs(record["{{@key}}"]).format("{{this.controls.format}}") : "");{{else}}
        row.push(isNil(record["{{@key}}"]) ? "-" : record["{{@key}}"]);{{/if}}{{/if}}{{/if}}{{/unless}}{{/each}}

        rows.push(row);
      }

      const bordered = {border: {top:{style: "thin", color: "00000000"}, right:{style: "thin", color: "00000000"}, bottom:{style: "thin", color: "00000000"}, left:{style: "thin", color: "00000000"}}};
      const workbook = XLSX.utils.book_new();
      const header0 = [{{#each $ui}}{{#unless (isNilorEmpty this.title)}}{{#if (isAvailableExportTableColumnControls this.controls)}}, "{{this.title}}"{{/if}}{{/unless}}{{/each}}].slice(1);
      const worksheet = XLSX.utils.aoa_to_sheet([
        header0.map((value) => ({ v: value, t: "s", s: { ...bordered, alignment: { horizontal: "center", vertical: "center", wrapText: false }, fill: { fgColor: { rgb: "FFCC00" } } }})),
        ...rows.map((row) => row.map((col: any) => ({ v: col, t: "s", s: { ...bordered, alignment: { horizontal: "center", vertical: "center", wrapText: false } } })))
      ]);
      worksheet["!cols"] = [{}, {}, ...(header0.slice(2).map((col) => {
        const { alphanumerics, wides } = groupBy(col, (char) => /[a-z0-9!@#$%^&*()_+=-]/i.test(char) ? "alphanumerics" : "wides");
        return {
          wch: Math.floor((alphanumerics || []).length + (wides || []).length * 2.5)
        }
      }))];
      // worksheet["!merges"] = [
      //   { s: { r: 0, c: 0 }, e: { r: 0, c: 1 } },
      // ];
      XLSX.utils.book_append_sheet(workbook, worksheet, "{{$table.title}}信息");
      XLSX.writeFile(workbook, "{{$table.title}}信息.xlsx");
      setIsExporting(false);
    }
    catch(e) {
      setIsExporting(e as Error);
    }
  }, 80));

  useEffect(() => {
    if (!isLoading) {
      exportExcel();
    }
  }, [isLoading]);

  useEffect(() => {
    if (isExporting !== true) {
      setTimeout(() => {
        context.navigateBack();
      }, 1200)
    }
  }, [isExporting]);

  return (
      isExporting === true 
      ? (
        <div className='flex justify-center'>
          <AiOutlineLoading3Quarters size={24} className='relative inline-block -top-[2px] mr-3 text-blue-500 animate-spin'/>正在导出
        </div>
      ) 
      : isExporting === false 
      ? (
        <div className='flex justify-center'>
          <AiFillCheckCircle size={24} className='relative inline-block -top-[2px] mr-3 text-green-500'/>导出成功
        </div>
      )
      : (
        <div className='flex justify-center'>
          <AiFillCloseCircle size={24} className='relative inline-block -top-[2px] mr-3 text-red-500'/>导出失败
        </div>
      )
  )
}
