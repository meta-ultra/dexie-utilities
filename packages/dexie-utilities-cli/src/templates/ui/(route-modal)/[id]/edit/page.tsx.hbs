import { useEffect, useState } from 'react'
import { type TreeSelectProps, Button, Form, {{getAntdControlsNamedImports $ui}} } from "antd";
{{#each (getAdditionalPackageControlsNamedImports $ui)}}
import { {{this}} } from "{{@key}}";
{{/each}}
import { useMutation, useSuspenseQuery } from '@tanstack/react-query';
import { useLocation } from 'react-router-dom';
import useEvent from 'react-use-event-hook';
import dayjs from "dayjs";
import { cloneDeep } from "lodash-es";
import { useRouteModalContext, cvtDayjs2Date, cvt2TreeData } from '@/components/@meta-ultra/antd-plus';
import { usePopup } from '@/utils/PopupContext';
import $axios from '@/utils/$axios';
import TreeNodeTitle from "../../../TreeDataTitle";
{{#unless (isNilorEmpty $ui-foreigns)}}
import { isArray, isNumber } from "lodash-es";
{{/unless }}

export default function Page({params}: {params: {id: string}}) {
  {{#each $ui-foreigns}}
  {{#if (isTreeSelect this.[0] ../$ui)}}
  const {data: {{pluralize (getForeignPropertyName this.[0])~}} } = useSuspenseQuery({
    queryKey: [`/api/{{pluralizeKebabCase this.[1].foreignTableName}}`],
    queryFn: ({queryKey}) => $axios.get(queryKey[0] as string)
  });
  const [treeData{{~pluralizeUpperCamelCase (getForeignPropertyName this.[0])~}}, setTreeData{{~pluralizeUpperCamelCase (getForeignPropertyName this.[0])~}}] = useState<TreeSelectProps["treeData"]>();
  useEffect(() => {
      const treeData{{~pluralizeUpperCamelCase (getForeignPropertyName this.[0])}} = cvt2TreeData({{pluralize (getForeignPropertyName this.[0])}}, {
        idPropName: "{{getPrimaryKeyPropName ../$ui}}",
        childrenPropName: "{{pluralizeLowerCamelCase this.[1].foreignTableName}}",
        title: (item: any) => {
          return <TreeNodeTitle item={item} />;
        }
      });

      setTreeData{{~pluralizeUpperCamelCase (getForeignPropertyName this.[0])~}}(treeData{{~pluralizeUpperCamelCase (getForeignPropertyName this.[0])~}});
  }, [{{pluralize (getForeignPropertyName this.[0])}}]);
  {{else}}
  const {data: {{pluralize (getForeignPropertyName this.[0])~}} } = useSuspenseQuery({
    queryKey: [`/api/{{pluralizeKebabCase this.[1].foreignTableName}}`, {{{this.[1].foreignCondition}}}],
    async queryFn({queryKey}) {
      const res: {total: number, data: any[]} | any[] = await $axios.get(queryKey[0] as string, {params: queryKey[1] || {}});
      if (isArray(res)) {
        return res;
      }
      else if (isNumber(res.total) && isArray(res.data)) {
        return res.data;
      }
    }
  });
  {{/if}}
  {{/each}}

  const {data: record} = useSuspenseQuery({
    queryKey: [`/api/{{pluralizeKebabCase tableName}}/${params.id}`],
    queryFn({queryKey}) {
      return $axios.get(queryKey[0] as string);
    }
  })

  const location = useLocation();
  const context = useRouteModalContext();
  const { message } = usePopup();
  const [formRef] = Form.useForm();
  const mutation = useMutation({
    mutationFn() {
      let data = Object.assign({}, formRef.getFieldsValue() || {});
      // for datetime
      {{#each $ui}}
      {{#if (isDate this.type)}}
      data["{{@key}}"] = cvtDayjs2Date(data["{{@key}}"]);
      {{/if}}
      {{/each}}

      {{!-- const entries = Object.entries(data);
      const hasFile = !!entries.find(([name, value]) => isArray(value));
      if (hasFile) {
        data = new FormData();
        for (const [name, value] of entries) {
          if (isArray(value)) {
            for (const item of value) {
              data.append(name, (item as unknown as {originFileObj: File}).originFileObj);
            }
          }
          else if (value != undefined) {
            data.append(name, value);
          }
        }
      } --}}
      return $axios.put(`/api/{{pluralizeKebabCase tableName}}/${params.id}`, data);
    }
  });

  const onConfirm = useEvent(async () => {
    try {
      await formRef.validateFields();

      try {
        await mutation.mutateAsync();
        context.navigateBack();
        message.success("操作成功");
      }
      catch(e) {
        message.error("操作失败: " + (e as Error).message);
      }
    }
    catch(e) {
      if (process.env.NODE_ENV !== "production") {
        console.warn(e);
      }
    }
  });

  useEffect(() => {
    if (formRef && location.state) {
      formRef.setFieldsValue(location.state);
    }
  }, [formRef, location.state]);

  useEffect(() => {
    if (context) {
      context.setModalProps({
        title: "修改{{$table.title}}信息",
        width: "80%",
        footer: [
          <Button key="cancel" onClick={context.navigateBack}>取 消</Button>,
          <Button key="confirm" loading={mutation.isPending} type='primary' onClick={onConfirm}>确 定</Button>,
        ],
      })
    }
  }, [mutation.isPending]);

  useEffect(() => {
    const kvs = cloneDeep(record);
    {{#each $ui}}
    {{#if (isImage this.controls)}}
    //@ts-ignore
    kvs["{{@key}}"] = [{
      key: "{{@key}}",
      url: kvs["{{@key}}"],
      status: "done",
    }];
    {{/if}}
    {{#if (isDate this.type)}}
    //@ts-ignore
    kvs["{{@key}}"] = dayjs(kvs["{{@key}}"]);
    {{/if}}
    {{/each}}

    formRef.setFieldsValue(kvs);
  }, [record]);

  return (
    <div>
      <Form form={formRef} autoComplete="off">
        <section className='flex flex-row flex-wrap gap-form'>
          {{#each $ui}}
          {{#unless (isNilorEmpty this.title)}}
          {{#unless this.nonEditable}}
          <Form.Item rootClassName={"{{getFormItemClassName 'basis-form-1/2 lg:basis-form-1/4' this.controls}}"} label={"{{this.title}}"} name={"{{@key}}"} rules={[{required: {{this.required~}} }]}>
            {{getFormControls @key this}}
          </Form.Item>
          {{/unless}}
          {{/unless}}
          {{/each}}
        </section>
      </Form>
    </div>
  )
}
