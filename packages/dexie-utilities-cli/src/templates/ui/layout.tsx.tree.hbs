import { type ReactNode, type Key, useState, useEffect, useRef } from "react";
import { type FormInstance, type TreeProps, Button, Tree } from "antd";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import useEvent from "react-use-event-hook";
import { useNavigate, useLocation } from "react-router-dom";
import { IoSearch } from "react-icons/io5";
import { IoMdAddCircleOutline } from "react-icons/io";
import { AiOutlineUpload, AiOutlineDownload } from "react-icons/ai";
import { useCache } from "@meta-ultra/cache";
import { RouteModal, cvtDayjs2Date, cvt2TreeData, matchTreeItem } from '@/components/@meta-ultra/antd-plus';
import $axios from "@/utils/$axios";
import QueryForm from "./QueryForm";
import TreeNodeTitle from "./TreeDataTitle";

const RouteModalRoutes = [
  /\/(delete|add|import|export)$/,
  /\/[^/]+\/(edit)$/,
] as const;

type Queries = {[name: string]: any};

export default function Layout({children}: {children: ReactNode}) {
  const location = useLocation();
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const cache = useCache();

  const [queries, setQueries] = useState<Queries>({...(cache.get("{{pluralizeKebabCase tableName}}") || {})});
  const { isLoading, data } = useQuery<any[]>({
    queryKey: ["/api/{{pluralizeKebabCase tableName}}"],
    queryFn: ({queryKey}) => $axios.get(queryKey[0] as string),
  });

  const queryFormRef = useRef<FormInstance>(null);
  const onSearch = useEvent(() => {
    setQueries((queries) => {
      return {
        ...queries,
        ...queryFormRef.current?.getFieldsValue(),
      }
    })
  });

  const [expandedKeys, setExpandedKeys] = useState<Key[]>([]);
  const [autoExpandParent, setAutoExpandParent] = useState(true);
  const onExpand = useEvent((newExpandedKeys: Key[]) => {
    setExpandedKeys(newExpandedKeys);
    setAutoExpandParent(false);
  });
  const [treeData, setTreeData] = useState<TreeProps["treeData"]>();
  useEffect(() => {
    if (data) {
      const matchedKeys: Key[] = [];
      const treeData = cvt2TreeData(data, {
        idPropName: "{{getPrimaryKeyPropName $ui}}",
        childrenPropName: "{{pluralizeLowerCamelCase tableName}}",
        title: (item: any) => {
          const matched = matchTreeItem(item, queries);
          if (matched) {
            matchedKeys.push(item.key);
          }
          return <TreeNodeTitle matched={matched} item={item} navigate={navigate} />;
        }
      });
      setExpandedKeys((expandedKeys) => {
        const set = new Set(expandedKeys);
        for (const key of matchedKeys) {
          set.add(key);
        }

        return Array.from(set);
      });
      setAutoExpandParent(true);
      setTreeData(treeData);
    }
    else {
      setTreeData([]);
    }
  }, [queries, data]);

  useEffect(() => {
    cache.set("{{pluralizeKebabCase tableName}}", queries);
  }, [queries]);

  useEffect(() => {
    if (!RouteModalRoutes.find((re) => re.test(location.pathname))) {
      queryClient.invalidateQueries({
        queryKey: ["/api/{{pluralizeKebabCase tableName}}"]
      });
    }
  }, [location.pathname, queryClient]);

  return (
    <section className="m-1">
      <section className="bg-card rounded mb-2 p-5 shadow-[1px_1px_5px_0px_#cdcdcd]">
        <QueryForm initialQueries={queries} ref={queryFormRef}/>
        <section className="flex flex-row flex-wrap gap-2 md:gap-3 [&_.ant-btn]:px-1 sm:[&_.ant-btn]:px-2 md:[&_.ant-btn]:px-4">
          <Button onClick={onSearch} rootClassName="!bg-btn-search !text-btn-search !border-btn-search">
            <IoSearch size={20} className="inline-block relative -top-[2px] sm:mr-1 md:mr-2"/>查 询
          </Button>
          <Button onClick={() => navigate(`add`)} rootClassName="!bg-btn-add !text-btn-add !border-btn-add">
            <IoMdAddCircleOutline size={20} className="inline-block relative -top-[2px] sm:mr-1 md:mr-2"/>新 增
          </Button>
          <Button onClick={() => navigate(`export`)} rootClassName="!bg-btn-export !text-btn-export !border-btn-export">
            <AiOutlineDownload size={20} className="inline-block relative -top-[2px] sm:mr-1 md:mr-2"/>导 出
          </Button>
          <Button onClick={() => navigate(`import`)} rootClassName="!bg-btn-import !text-btn-import !border-btn-import">
            <AiOutlineUpload size={20} className="inline-block relative -top-[2px] sm:mr-1 md:mr-2"/>导 入
          </Button>
        </section>
      </section>
      <section className="bg-card rounded mt-1 mb-2 p-5 shadow-[1px_1px_5px_0px_#cdcdcd]">
        {
          isLoading 
          ? <div>Loading</div> 
          : (
            <Tree 
              selectable={false} 
              autoExpandParent={autoExpandParent} 
              expandedKeys={expandedKeys} 
              onExpand={onExpand}
              draggable 
              blockNode 
              treeData={treeData}
            />
          )
        }
      </section>
      <RouteModal routes={RouteModalRoutes}>
        {children}
      </RouteModal>
    </section>
  )
}
