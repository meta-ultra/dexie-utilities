import { type NextRequest, type NextContext, NextResponse, objectify, withValidation } from "@meta-ultra/app-router";
import { isEqual, isArray, isString } from "lodash-es";
import * as yup from "yup";
/* Dexie START */
import { query } from "@meta-ultra/dexie-utilities";
import { db, I{{~upperCamelCase tableName~}}TableName, I{{upperCamelCase tableName}}{{#unless (isNilorEmpty $route-handlers-foreigns $route-handlers-many)}}, {{upperCamelCase tableName}}{{/unless}} } from "{{databasePackage}}";
/* Dexie END */

const $table = db[I{{~upperCamelCase tableName~}}TableName];

const searchParamsSchemaOfGet = yup.object({
  page: yup.number().integer().min(1),
  pageSize: yup.number().integer().min(1),
  sorter: yup.object({
    field: yup.string(),
    order: yup.string(),
  }),
  {{!-- {{#unless (isNilorEmpty (getPrimaryField fields))}}
  {{#with (getPrimaryField fields)}}
  {{this.[0]}}s: yup.array().of(yup.{{frameYupSchema this.[1]}}),
  {{/with}}
  {{/unless}} --}}
  {{#each $route-handlers}}
  {{@key~}}: yup.{{~frameRouteHandlersYupSchema this~}},
  {{/each}}
});
export const GET = withValidation(
  { searchParamsSchema: searchParamsSchemaOfGet },
  async function (request: NextRequest, context: NextContext) {
    try {
      const { page, pageSize, sorter, ...rest } = searchParamsSchemaOfGet.cast(objectify(request.nextUrl.searchParams));
      /* Dexie START */
      const { total, data } = await query($table, rest, page, pageSize, sorter);
      {{#unless (isNilorEmpty $route-handlers-foreigns $route-handlers-many)}}

      await Promise.all(
        data.map(async (record: {{upperCamelCase tableName}}) => {
          return Promise.all([
            {{#each $route-handlers-foreigns}}
            await record.load{{~upperCamelCase (getForeignPropertyName this.[0])~}}(),
            {{/each}}
            {{#each (filterRouteHandlersMany $route-handlers-many)}}
            await record.load{{~upperCamelCase (pluralizeLowerCamelCase this.[1].manyTableName)~}}(),
            {{/each}}
          ])
        })
      );
      {{/unless}}
      /* Dexie END */
 
      return NextResponse.json({
        code: 0,
        data: {
          total,
          data,
        }
      });
    }
    catch(e) {
      return NextResponse.json({
        code: 1,
        error: e,
        message: (e as {message?: string}).message,
      });
    }
  }
);

const searchParamsSchemaOfDelete = yup.object({
  {{#each (getRouteHandlersPrimaryKeys $route-handlers)}}
  {{pluralizeLowerCamelCase @key}}: yup.mixed().test((value) => yup.{{frameRouteHandlersYupSchema this}}.isValidSync(value) || yup.array().of(yup.{{frameRouteHandlersYupSchema this}}).isValidSync(value)),
  {{/each}}
  {{#each $route-handlers}}
  {{@key~}}: yup.{{frameRouteHandlersYupSchema this}},
  {{/each}}
});
export const DELETE = withValidation(
  { searchParamsSchema: searchParamsSchemaOfDelete },
  async function (request: NextRequest, context: NextContext) {
    try {
      let { {{#each (getRouteHandlersPrimaryKeys $route-handlers)}}{{pluralizeLowerCamelCase @key}}, {{/each}}...rest } = searchParamsSchemaOfDelete.cast(objectify(request.nextUrl.searchParams));
      /* Dexie START */
      await db.transaction("rw", $table, async () => {
        {{#unless (isNilorEmpty (getRouteHandlersPrimaryKeys $route-handlers))}}
        let executed = false;{{#each (getRouteHandlersPrimaryKeys $route-handlers)}}
        if (isArray({{pluralizeLowerCamelCase @key}})) {
          executed = true;
          {{pluralizeLowerCamelCase @key}} = yup.array().of(yup.{{frameRouteHandlersYupSchema this}}).cast({{pluralizeLowerCamelCase @key}});
          await $table.bulkDelete(({{pluralizeLowerCamelCase @key}} as any[]).filter((x) => x !== undefined) as {{this.type}}[]);
        }
        else if (isString({{pluralizeLowerCamelCase @key}})) {
          executed = true;
          {{pluralizeLowerCamelCase @key}} = yup.{{frameRouteHandlersYupSchema this}}.cast({{pluralizeLowerCamelCase @key}});
          await $table.bulkDelete([{{pluralizeLowerCamelCase @key}}] as number[]);
        }
        {{/each}}
        if (!executed) {
          const { total, data } = await query($table, rest);
          await Promise.all(data.map(async (target) => {
            return $table.filter((record: I{{upperCamelCase tableName}}) => {
              return isEqual(record, target);
            }).delete();
          }));
        }
        {{~else}}
        const { total, data } = await query($table, rest);
        await Promise.all(data.map(async (target) => {
          return $table.filter((record: I{{upperCamelCase tableName}}) => {
            return isEqual(record, target);
          }).delete();
        }));
        {{/unless}}
      });
      /* Dexie END */
      return NextResponse.json({code: 0});
    }
    catch(e) {
      return NextResponse.json({
        code: 1,
        error: e,
        message: (e as {message?: string}).message,
      });
    }
  }
);

const singleBodySchemaOfPost = yup.object({
  {{#each $route-handlers}}
  {{@key~}}: yup.{{frameRouteHandlersYupSchema this true}},
  {{/each}}
});
const batchBodySchemaOfPost = yup.array().of(singleBodySchemaOfPost);
const bodySchemaOfPost = yup.mixed().test((value) => {
  return singleBodySchemaOfPost.isValidSync(value) || batchBodySchemaOfPost.isValidSync(value);
});
export const POST = withValidation(
  { bodySchema: bodySchemaOfPost },
  async function (request: NextRequest, context: NextContext) {
    const json = await request.json();
    const isBatch = batchBodySchemaOfPost.isValidSync(json);
    try {
      if (isBatch) {
        const records = batchBodySchemaOfPost.cast(json);
        if (records) {
          /* Dexie START */
          await Promise.all(
            records.map(async (record) => {
              if (!await $table.where(record).count()) {
                $table.add({...record});
              }
            })
          )
          /* Dexie END */
        } 
      }
      else {
        const record = singleBodySchemaOfPost.cast(json);
        /* Dexie START */
        $table.add({...record});
        /* Dexie END */
      }
      return NextResponse.json({code: 0});
    }
    catch(e) {
      return NextResponse.json({
        code: 1,
        error: e,
        message: (e as {message?: string}).message,
      });
    }
  }
);