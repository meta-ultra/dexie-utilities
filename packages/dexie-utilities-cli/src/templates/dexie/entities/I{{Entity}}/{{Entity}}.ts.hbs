import { Table } from "dexie";
import { db } from "../../db";
{{#unless (isNilorEmpty (filterDexieMany $dexie-many))}} import { pick, isEqual } from "lodash-es";{{/unless}}
import { type I{{~upperCamelCase tableName~}}, I{{~upperCamelCase tableName~}}TableName } from "./I{{~upperCamelCase tableName~}}";
{{#each (getDexieForeignManyTableNames $dexie-foreigns $dexie-many tableName)}}
import { type I{{~upperCamelCase this~}}, I{{~upperCamelCase this~}}TableName, {{upperCamelCase this}} } from "../I{{~upperCamelCase this~}}";
{{/each}}

export class {{upperCamelCase tableName}} implements I{{~upperCamelCase tableName}} {
  $table: Table;

{{#each $dexie}}
  {{@key}}{{~#unless this.required~}}?{{~/unless~}}: {{this.type~}};
{{/each}}

{{#each $dexie-foreigns}}
  {{getForeignPropertyName this.[0]~}}?: {{upperCamelCase this.[1].foreignTableName~}};
{{/each}}
{{#each (filterDexieMany $dexie-many)}}
  {{pluralizeLowerCamelCase this.[1].manyTableName~}}?: {{upperCamelCase this.[1].manyTableName~}}[];
{{/each}}

  constructor({{#each (sortByRequiredFirst $dexie)}}{{#if @index}}, {{/if}}{{this.[0]}}{{#unless this.[1].required}}?{{/unless}}: {{this.[1].type}}{{/each}}) {
    this.$table = db[I{{~upperCamelCase tableName~}}TableName];

  {{#each (sortByRequiredFirst $dexie)}}
    {{#if (get this "1.required")}}
    this.{{~this.[0]}} = {{this.[0]~}};
    {{else}}
    if ({{~this.[0]}} !== undefined) this.{{this.[0]}} = {{this.[0]~}};
    {{/if}}
  {{/each}}
  }
  {{#each $dexie-foreigns}}

  async load{{~upperCamelCase (getForeignPropertyName this.[0])~}}() {
    if (this.{{~this.[0]}} !== undefined) {
      const record = await db[I{{~upperCamelCase this.[1].foreignTableName~}}TableName].get({
        "{{~this.[1].foreignColumnName~}}": this.{{~this.[0]~}},{{#unless (isNilorEmpty this.[1].foreignCondition)}}
        ...Object({{{this.[1].foreignCondition}}}),{{/unless}}
      });
      if (record) {
        this.{{~getForeignPropertyName this.[0]}} = record as {{upperCamelCase this.[1].foreignTableName~}};
      }
    }
  }
  {{/each}}
  {{#each (filterDexieMany $dexie-many)}}

  async load{{~upperCamelCase (pluralizeLowerCamelCase this.[1].manyTableName)~}}() {
    {{#unless (isNilorEmpty this.[1].manyCondition)}}
    if (!isEqual(pick(this, Object.keys({{{this.[1].manyCondition}}})), {{{this.[1].manyCondition}}})) {
      this.{{~pluralizeLowerCamelCase this.[1].manyTableName}} = [];
    }

    {{/unless}}
    this.{{~pluralizeLowerCamelCase this.[1].manyTableName}} = await db[I{{~upperCamelCase this.[1].manyTableName~}}TableName].filter((record) => {
      return record.{{this.[1].manyColumnName}} === this.{{~this.[0]~}};
    }).toArray() as {{upperCamelCase this.[1].manyTableName~}}[];

    {{#if (isEqual this.[1].manyTableName tableName)}}
    await Promise.all(this.{{~pluralizeLowerCamelCase tableName~}}.map(async (item) => await item.load{{~pluralizeLowerCamelCase tableName~}}()));
    {{/if}}
  }
  {{/each}}
}