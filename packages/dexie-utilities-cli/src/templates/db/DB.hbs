import Dexie, { type Table } from 'dexie';
{{#each entities}}
import { type I{{~upperCamelCase this.[0]~}}, I{{~upperCamelCase this.[0]~}}TableName, I{{~upperCamelCase this.[0]~}}Schema, I{{~upperCamelCase this.[0]~}}KeyType, {{upperCamelCase this.[0]}}, populateI{{~upperCamelCase this.[0]}} } from './entities/I{{~upperCamelCase this.[0]~}}';
{{/each}}

export class ApplicationDexie extends Dexie {
  {{#each entities}}
  [I{{~upperCamelCase this.[0]~}}TableName]!: Table<I{{~upperCamelCase this.[0]~}}, I{{~upperCamelCase this.[0]~}}KeyType>;
  {{/each}}

  constructor() {
    super("applicationDatabase");
    this.version(1).stores({
      {{#each entities}}
      [I{{~upperCamelCase this.[0]~}}TableName]: I{{~upperCamelCase this.[0]~}}Schema,
      {{/each}}
    });
  }
}

export const db = new ApplicationDexie();

{{#each entities}}
db[I{{~upperCamelCase this.[0]~}}TableName].mapToClass({{~upperCamelCase this.[0]~}});
{{/each}}

const populate = async function populate(this: ApplicationDexie) {
  console.info("[@meta-ultra/app-router] population is done.");

  {{#each entities}}
  await populateI{{~upperCamelCase this.[0]~}}(this);
  {{/each}}
}.bind(db);
db.on("populate", () => populate());

// expose for debugging
(window as unknown as {db: Dexie}).db = db;
(window as unknown as {populate: (this: ApplicationDexie) => Promise<any>}).populate = populate;